#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RelayServer ‚Äî forward UDP payload gi·ªØa c√°c node qua WebSocket.

üìå Ch·ª©c nƒÉng:
- M·ªói Node (A, B, ‚Ä¶) k·∫øt n·ªëi t·ªõi RelayServer qua WebSocket v√† ƒëƒÉng k√Ω `node_id`.
- Khi Node A g·ª≠i RPC (d∆∞·ªõi d·∫°ng datagram base64) ƒë·∫øn Node B:
  Relay s·∫Ω forward nguy√™n g√≥i d·ªØ li·ªáu t·ªõi Node B m√† kh√¥ng ph√¢n t√≠ch n·ªôi dung.
- Node B x·ª≠ l√Ω datagram, c√≥ th·ªÉ g·ª≠i ph·∫£n h·ªìi ng∆∞·ª£c l·∫°i (d∆∞·ªõi d·∫°ng datagram base64).

üìå C·∫•u tr√∫c message JSON:
- T·ª´ Node g·ª≠i ƒëi:
    {
        "node_id": "nodeA",            # ch·ªâ khi connect
        "target": "nodeB",             # node ƒë√≠ch
        "rpc": "udp_forward",          # h√†nh ƒë·ªông
        "rpc_id": "<uuid>",            # id ƒë·ªÉ match response
        "payload_b64": "<base64>"      # datagram nh·ªã ph√¢n (UDP g·ªëc)
    }

- Relay forward nguy√™n b·∫£n cho nodeB:
    {
        "source": "nodeA",
        "rpc": "udp_forward",
        "rpc_id": "<uuid>",
        "payload_b64": "<base64>"
    }

üìå C√°ch ch·∫°y:
Terminal 1: python relay_server.py
Terminal 2: nodeB k·∫øt n·ªëi t·ªõi relay
Terminal 3: nodeA k·∫øt n·ªëi v√† g·ª≠i g√≥i forward t·ªõi nodeB

üìå L∆∞u √Ω:
- Relay ch·ªâ gi·ªØ vai tr√≤ transport trung gian (WebSocket).
- Kh√¥ng gi·∫£i m√£ msgpack, kh√¥ng x·ª≠ l√Ω logic RPC.
"""

import asyncio
import json
import logging
import websockets

# -----------------------------------------------------------------------------
# Logging setup
# -----------------------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
log = logging.getLogger("RelayServer")


# -----------------------------------------------------------------------------
# RelayServer class
# -----------------------------------------------------------------------------
class RelayServer:
    def __init__(self, host: str = "0.0.0.0", port: int = 8765):
        self.host = host
        self.port = port
        self.connections = {}  # node_id -> websocket

    async def _register_node(self, websocket) -> str:
        """
        Nh·∫≠n message ƒë·∫ßu ti√™n t·ª´ client ƒë·ªÉ ƒëƒÉng k√Ω node_id.
        """
        try:
            init = await asyncio.wait_for(websocket.recv(), timeout=10.0)
            data = json.loads(init)
            node_id = data.get("node_id")
            if not node_id:
                await websocket.close()
                return None
            if node_id in self.connections:
                log.warning(f"[Relay] Node {node_id} ƒë√£ t·ªìn t·∫°i, thay th·∫ø k·∫øt n·ªëi c≈©.")
                old_ws = self.connections.pop(node_id)
                await old_ws.close()
            self.connections[node_id] = websocket
            log.info(f"[Relay] ‚úÖ Node '{node_id}' connected ({len(self.connections)} total)")
            return node_id
        except asyncio.TimeoutError:
            log.warning("Client kh√¥ng g·ª≠i node_id trong 10s ‚Üí ƒë√≥ng k·∫øt n·ªëi.")
        except Exception as e:
            log.error(f"L·ªói khi ƒëƒÉng k√Ω node: {e}")
        return None

    async def _forward_message(self, src_id: str, data: dict):
        """
        Forward message t·ª´ src_id ‚Üí target_id.
        """
        target_id = data.get("target")
        if not target_id:
            log.warning(f"[Relay] B·ªè qua message thi·∫øu 'target' t·ª´ {src_id}")
            return

        # T·∫°o message forward
        msg = {
            "source": src_id,
            "rpc": data.get("rpc", "udp_forward"),
            "rpc_id": data.get("rpc_id"),
            "payload_b64": data.get("payload_b64"),
        }

        # Forward cho target n·∫øu online
        target_ws = self.connections.get(target_id)
        if target_ws:
            try:
                await target_ws.send(json.dumps(msg))
                log.debug(f"[Relay] {src_id} ‚Üí {target_id} ({len(data.get('payload_b64',''))} bytes b64)")
            except Exception as e:
                log.warning(f"[Relay] g·ª≠i t·ªõi {target_id} l·ªói: {e}")
        else:
            log.warning(f"[Relay] ‚ùå Target '{target_id}' ch∆∞a online (t·ª´ {src_id})")

    async def handler(self, websocket):
        """
        X·ª≠ l√Ω m·ªôt client WebSocket.
        """
        node_id = await self._register_node(websocket)
        if not node_id:
            return

        try:
            async for message in websocket:
                try:
                    data = json.loads(message)
                    # Lo·∫°i b·ªè echo t·ª± g·ª≠i
                    if not isinstance(data, dict):
                        continue
                    # Chuy·ªÉn ti·∫øp payload
                    await self._forward_message(node_id, data)
                except json.JSONDecodeError:
                    log.warning(f"[Relay] JSON l·ªói t·ª´ {node_id}")
                except Exception as e:
                    log.exception(f"L·ªói x·ª≠ l√Ω message t·ª´ {node_id}: {e}")

        except websockets.ConnectionClosed:
            pass
        finally:
            # cleanup
            if node_id:
                self.connections.pop(node_id, None)
                log.info(f"[Relay] üîå Node '{node_id}' disconnected. ({len(self.connections)} left)")

    async def run(self):
        """
        Ch·∫°y relay server (blocking).
        """
        log.info(f"[Relay] Running WebSocket relay on ws://{self.host}:{self.port}")
        async with websockets.serve(self.handler, self.host, self.port):
            await asyncio.Future()  # run forever


# -----------------------------------------------------------------------------
# Entry point
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    try:
        asyncio.run(RelayServer().run())
    except KeyboardInterrupt:
        log.info("Relay server stopped by user.")
